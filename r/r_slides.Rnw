\documentclass{beamer}

\usepackage{beamerthemesplit} % TODO: use different beamer theme
\usepackage{xspace}
\usepackage{hyperref}

\newcommand{\R}{\texttt{R}\xspace}

\title{SIAM: Getting Started with R}
\author{Mark M. Fredrickson}
\date{\today}

\begin{document}

\frame{\titlepage}

\section{Example: Comparing Two Algorithms}
% - (2) quick example

\section{\R Basics}
\begin{frame}{What is \R?}
  \begin{itemize}
  \item A language for statistical analysis (data manipulation, modeling, visualization).
   \item \texttt{S} started at Bell Labs in 1970s and 1980s.
   \item GNU \R is an open source port of the language.
   \item Currently in version \texttt{3.0.x}.
   \item Interpreted language with bindings to C/C++, Fortran, other languages
   \item Available for Windows, Mac, UNIXes; extensive package repository
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Variables}
 \begin{itemize}
   \item Variables can be assigned using either \texttt{<-} or \texttt{=}
<<>>=
a <- 7
b = c(1, 2, 3, 4)
@ 
    \item The basic data type is a vector (with optional names)
<<>>=
is.vector(c(a = 3, foo = 1, 4, last123 = 1))
is.vector(3)
@ 
  \item Assigning via special functions like \texttt{names<-}:
<<>>=
names(b) <- c("A", "B", "C", "D")
b
@ 
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Objects}
  \begin{itemize}
    \item Objects have a \emph{class} and a \emph{mode}
<<>>=
m <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 2)
class(m)
mode(m)
@  
    \item Usual suspects for modes:
      \begin{itemize}
        \item logical
        \item numeric (integer, double, complex, factor)
        \item character (strings)
        \item raw
        \item list
      \end{itemize}
  \end{itemize}
\end{frame}

\begin{frame}{Exercise: Variables}
  \begin{itemize}
    \item Create a vector with three numbers (use the \texttt{c} function).
    \item Create a vector with six numbers.
    \item Add them together. What happens?
    \item \pause \texttt{R} will ``recycle'' vectors to the length of the longer one.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Loops}
  The usual \texttt{for} and \texttt{while} constructs exist: 
<<>>=
a <- 0

for (i in 1:5) {
  a <- a + i
}

print(a)
@ 
The \texttt{*apply} family of functions perform maps over vectors:
<<>>=
sapply(c(1,2,3,4), function(x) { x * x })
@ 
\end{frame}

\begin{frame}[fragile]{Vectorization}
  
Many explicit loops can be avoided with ``vectorization'':
<<>>=
square <- function(x) { x * x }
square(c(1,2,3))
@ 
There are some built in functions to ``vectorize'' other functions.
\end{frame}

\begin{frame}[fragile]{Functions: Creating and Passing}
  Functions are created like regular variables and can be treated like any other object:
<<eval = FALSE>>=
withfile <- function(fname, f) {
  sink(fname)
  f()
  sink()
}

withfile("myoutput.txt", function() { 
  print("hi")
  print("bye") 
})
@ 
\end{frame}

\begin{frame}[fragile]{Functions: Arguments}
  Arguments can be named and given default values. Special \texttt{...} argument captures any other passed arguments.
<<>>=
f <- function(a, b, c = 0.5, ...) {
  round(a:b * c, ...)
}
@ 
<<>>=
f(1, 3)
f(b = 3, a = 1)
f(c = 1/3, 1 , 3, digits = 3)
@ 
\end{frame}

\begin{frame}[fragile]{Booleans and Comparisons}
  \begin{itemize}
    \item Standard boolean operations:
<<>>=
c(TRUE && TRUE, TRUE && FALSE, FALSE || TRUE)
@
    \item Single boolean \texttt{if-else} statements; \texttt{switch} function

    \item Elementwise boolean operations \texttt{|} and \texttt{\&}:
<<>>=
c(TRUE, TRUE, FALSE) | c(FALSE, TRUE, FALSE)
@ 
     \item Elementwise comparisons:
<<>>=
ifelse(c(1,2,3,4,5) %% 2 == 0, "even", "odd")
@ 
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Exercise: Function to compute multiples}
From Project Euler Problem 1:
\begin{quote}
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
\end{quote}

\begin{itemize}
  \item Write a function \texttt{isThreeOrFive} that returns a boolean (hint: \texttt{\%\%} is modulo).
  \item Apply the function to all values from 1 to 1000 (hint: \texttt{1:1000}).
  \item Use the \texttt{sum} function to answer the question.
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Example solutions}
  \begin{itemize}
    \item Vectorization:
<<>>=
isThreeOrFive <- function(x) { 
  # by using elementwise operation, this is vectorized
  (x %% 3 == 0) | (x %% 5 == 0) 
}
                                                                        
sum((1:999)[isThreeOrFive(1:999)])
@ 
    \item Explicit looping:
<<>>=
s <- 0
for (x in 1:999) {
  if (isThreeOrFive(x)) s <- s + x
}
s
@ 
    \item Functional one liner:
<<>>=
sum(Filter(x = 1:1000, f = isThreeOrFive))
@ 
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Missing Values}
  \begin{itemize}
    \item Missing values for any data type is notated with the special \texttt{NA} value.
    \item Missing values (\texttt{NA}) are neither true or false, but short circuiting can still occur:
<<>>=
c(FALSE && NA, TRUE || NA)
c(TRUE && NA, FALSE || NA)
@ 
    \item Many functions will have special \texttt{NA} handling arguments:
<<>>=
nas <- c(1, 2, 3, NA, 5)
mean(nas)
mean(nas, na.rm = TRUE)
@ 
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Matrices}
  The \texttt{matrix} class holds a single mode of data in a square format.
      \begin{itemize}
        \item Convenient substripting notation style:
        \item Standard linear algebra tools available.
        \item The \texttt{array} class generalizes to dimensions $>
          2$.
      \end{itemize}
<<>>=
matrix <- matrix(1:12, nrow = 3)
m[1:2, 2:3]
@ 
\end{frame}

\begin{frame}[fragile]{Data Frames}
  The \texttt{data.frame} class holds multiple modes, \texttt{\$} operator to get specific columns as vectors.
<<>>=
df <- data.frame(nums = 1:10, letters = letters[1:10])
df[1:3, ]
df$letters
@      
\end{frame}

\begin{frame}[fragile]{Formulas}
  A common interface is a formula with a left and right hand side:
<<results = hide>>=
y ~ x1 + x2 + x3 * x4 + log(x5)
@
  \begin{itemize}
    \item Used in many model fitting and plotting routines.
    \item Short hand notation for interactions (\texttt{:} and \texttt{*}).
    \item Many functions permitted.
    \item Can pull variables from the enviroment, but usally better to combine with a \texttt{data = mydata} argument.
   \end{itemize}
\end{frame}
\section{Packages}

\begin{frame}{CRAN}
  The \href{http://cran.r-project.org/}{Comprehensive \R Archive Network}(CRAN) is a repository for community packages.
  \begin{itemize}
    \item \input{crancounts}
    \item Easy to use with \texttt{install.packages("packageName")}
    \item Packages for different statistical techniques, plotting/graphics, parsing, development tools.
    \item Pre-built binaries for Windows and OS X. Source builds for other platforms.
  \end{itemize}
  
\end{frame}

\begin{frame}[fragile]{Installing and Using Packages}
<<eval = FALSE>>=
install.packages("e1071")
@ 
  
<<>>=
library(e1071)
data(Titanic)
m <- naiveBayes(Survived ~ ., data = Titanic)
me <- list(class = "3rd", Sex = "Male", "Age" = "Adult")
predict(m, newdata = me)
@ 
\end{frame}

% - (10) installing packages, recommended packages

\section{Using \R}
% - (10) Using R in a larger project, reproducible research

\section{Other Resources}
% - (5) Other resources

\section{Data Competition}
% - (15) Data competition

\end{document}
