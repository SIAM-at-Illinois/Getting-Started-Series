\documentclass{beamer}

\usepackage{beamerthemesplit} % TODO: use different beamer theme
\usepackage{xspace}

\newcommand{\R}{\texttt{R}\xspace}

\title{SIAM: Getting Started with R}
\author{Mark M. Fredrickson}
\date{\today}

\begin{document}

\frame{\titlepage}

\frame
{
  \frametitle{First Slide}

  \begin{itemize}
  \item ...
  \end{itemize}
}

\section{Example: Comparing Two Algorithms}
% - (2) quick example

\section{\R Basics}
\begin{frame}{What is \R?}
  \begin{itemize}
  \item A language for statistical analysis (data manipulation, modeling, visualization).
   \item \texttt{S} started at Bell Labs in 1970s and 1980s.
   \item GNU \R is an open source port of the language.
   \item Currently in version \texttt{3.0.x}.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{A twisted family tree}
 \begin{itemize}
   \item Mostly \texttt{C} syntax (\texttt{for} loops, curly braces).
<<>>=
a <- 0

for (i in 1:5) {
  a <- a + i
}

print(a)
@ 
   \item Like APL, many operations on vectors.
<<>>=
c(1,2,3) * c(4,5,6)
@ 
   \item Functional programming constructs from Scheme.
<<>>=
f <- function(i, k) { i * k / i^k }
g <- function(i) { function(k) { f(i, k) }}
sapply(c(1,2,3,4,5), g(3))
@ 
   \item Multiple object systems (S3, S4, reference)
 \end{itemize}
\end{frame}
% - (10) basic syntax, loading data, plotting

\begin{frame}[fragile]{Variables}
 \begin{itemize}
   \item Variables can be assigned using either \texttt{<-} or \texttt{=}
<<>>=
a <- 7
b = c(1, 2, 3, 4)
@ 
    \item The basic data type is a vector
<<>>=
is.vector(c(3,1,4,1))
is.vector(3)
@ 
    \item Variables have a \emph{class} and a \emph{mode}
<<>>=
m <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 2)
class(m)
mode(m)
@  
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Booleans and Comparisons}
  \begin{itemize}
    \item Standard boolean operations:
<<>>=
c(TRUE && TRUE, TRUE && FALSE, FALSE || TRUE)
@
    \item Single boolean \texttt{if-else} statements; \texttt{switch} function

    \item Elementwise boolean operations:
<<>>=
c(TRUE, TRUE, FALSE) | c(FALSE, TRUE, FALSE)
c(TRUE, TRUE, FALSE) & c(FALSE, TRUE, FALSE)
@ 
     \item Elementwise comparisons:
<<>>=
ifelse(c(1,2,3,4,5) %% 2 == 0, "even", "odd")
@ 
  
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Missing Values}
  \begin{itemize}
    \item Missing values for any data type is notated with the special \texttt{NA} value.
    \item Missing values (\texttt{NA}) are neither true or false, but short circuiting can still occur:
<<>>=
c(FALSE && NA, TRUE || NA)
c(TRUE && NA, FALSE || NA)
@ 
    \item Many functions will have special \texttt{NA} handling arguments:
<<>>=
nas <- c(1, 2, 3, NA, 5)
mean(nas)
mean(nas, na.rm = TRUE)
@ 
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Matrices}
  The \texttt{matrix} class holds a single mode of data in a square format.
      \begin{itemize}
        \item Convenient substripting notation style:
        \item Standard linear algebra tools available.
        \item The \texttt{array} class generalizes to dimensions $>
          2$.
      \end{itemize}
<<>>=
matrix <- matrix(1:12, nrow = 3)
m[1:2, 2:3]
@ 
\end{frame}

\begin{frame}[fragile]{Data Frames}
  The \texttt{data.frame} class holds multiple modes, \texttt{\$} operator to get specific columns as vectors.
<<>>=
df <- data.frame(nums = 1:10, letters = letters[1:10])
df[1:3, ]
df$letters
@      
\end{frame}

\begin{frame}[fragile]{Formulas}
  A common interface is a formula with a left and right hand side:
<<results = hide>>=
y ~ x1 + x2 + x3 * x4 + log(x5)
@
  \begin{itemize}
    \item Used in many model fitting and plotting routines.
    \item Short hand notation for interactions (\texttt{:} and \texttt{*}).
    \item Many functions permitted.
    \item Can pull variables from the enviroment, but usally better to combine with a \texttt{data = mydata} argument.
   \end{itemize}
\end{frame}

\begin{frame}[fragile]{Functions: Creating and Passing}
  Functions are created like regular variables and can be treated like any other object:
<<eval = FALSE>>=
withfile <- function(fname, f) {
  sink(fname)
  f()
  sink()
}

withfile("myoutput.txt", function() { 
  print("hi")
  print("bye") 
})
@ 
\end{frame}

\begin{frame}[fragile]{Functions: Arguments}
  Arguments can be named and given default values. Special \texttt{...} argument captures any other passed arguments.
<<>>=
f <- function(a, b, c = 0.5, ...) {
  round(a:b * c, ...)
}
@ 
<<>>=
f(1, 3)
f(b = 3, a = 1)
f(c = 1/3, 1 , 3, digits = 3)
@ 
\end{frame}

\section{Packages}
% - (10) installing packages, recommended packages

\section{Using \R}
% - (10) Using R in a larger project, reproducible research

\section{Other Resources}
% - (5) Other resources

\section{Data Competition}
% - (15) Data competition

\end{document}
